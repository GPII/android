/*
 * GPII Android Audio Manager Tests
 *
 * Copyright 2013, 2014 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

var thatall = this;

(function () {
    "use strict";

    var fluid = require("universal"),
        jqUnit = fluid.require("jqUnit"),
        bridge = require("bridge"),
        androidAudioManager = bridge.load("net.gpii.AndroidAudioManagerImpl",
                                          thatall);

    jqUnit.module("GPII Android audioManager");

    jqUnit.test("Running tests for audioManager node module", function () {
        // Testing the audioManager Java module

        // Check if all required methods are available through the java bridge
        //
        var methods = ["getVolume", "setVolume"];

        for (var method in methods) {
            jqUnit.assertTrue("Checking availability of method '" + method + "'",
                              (methods[method] in androidAudioManager));
        }

        // Check getVolume
        //
        var system_volume = null;
        system_volume = androidAudioManager.getVolume("STREAM_SYSTEM");
        jqUnit.assertNotEquals("'getVolume' gets the value",
                               null, system_volume);

        // Check setVolume
        //
        androidAudioManager.setVolume("STREAM_SYSTEM", 0);
        jqUnit.assertDeepEq("'setVolume' sets the value",
                            androidAudioManager.getVolume("STREAM_SYSTEM"),
                            0);

        // Set the volume back to its original value
        //
        androidAudioManager.setVolume("STREAM_SYSTEM", system_volume);
        jqUnit.assertDeepEq("'setVolume' sets back the volume to its original value",
                            androidAudioManager.getVolume("STREAM_SYSTEM"),
                            system_volume);

        // Testing the audioManager settings handler

        require("audioManager");
        var amSettingsHandler = fluid.registerNamespace("gpii.androidAudioManager.volume");

        // Check if methods are available through the settings handler module
        //
        methods = ["get", "set"];

        for (method in methods) {
            jqUnit.assertTrue("Checking availability of method '" + method + "'",
                              (methods[method] in amSettingsHandler));
        }

        // Check get/set payloads of the settings handler
        //
        var getPayload = {
            "com.android.audioManager": [{
                settings: {
                    "STREAM_VOICE_CALL": null,
                    "STREAM_SYSTEM": null,
                    "STREAM_MUSIC": null,
                    "STREAM_ALARM": null,
                    "STREAM_NOTIFICATION": null,
                    "STREAM_DTMF": null
                }
            }]
        };

        var setPayload = {
            "com.android.audioManager": [{
                settings: {
                    "STREAM_VOICE_CALL": 3,
                    "STREAM_SYSTEM": 3.5,
                    "STREAM_MUSIC": 3,
                    "STREAM_ALARM": 3,
                    "STREAM_NOTIFICATION": 3,
                    "STREAM_DTMF": 3
                }
            }]
        };

        var originalSettingsPayload = amSettingsHandler.get(getPayload);
        var originalSettings =
            originalSettingsPayload["com.android.audioManager"][0].settings;

        var expectedPayload = {
            "com.android.audioManager": [{
                "settings": {
                    "STREAM_VOICE_CALL": {
                        "oldValue": originalSettings.STREAM_VOICE_CALL,
                        "newValue": 3
                    },
                    "STREAM_SYSTEM": {
                        "oldValue": originalSettings.STREAM_SYSTEM,
                        "newValue": 3.5
                    },
                    "STREAM_MUSIC": {
                        "oldValue": originalSettings.STREAM_MUSIC,
                        "newValue": 3
                    },
                    "STREAM_ALARM": {
                        "oldValue": originalSettings.STREAM_ALARM,
                        "newValue": 3
                    },
                    "STREAM_NOTIFICATION": {
                        "oldValue": originalSettings.STREAM_NOTIFICATION,
                        "newValue": 3
                    },
                    "STREAM_DTMF": {
                        "oldValue": originalSettings.STREAM_DTMF,
                        "newValue": 3
                    }
                }
            }]
        };

        var returnPayload = amSettingsHandler.set(setPayload);

        jqUnit.assertDeepEq("'set' returns the expected payload",
                            returnPayload,
                            expectedPayload);

        // Since Android's Audio Manager API doesn't like float numbers we force them
        // to be integers when setting the value
        //
        var expectedRealValues = {
            "com.android.audioManager": [{
                settings: {
                    "STREAM_VOICE_CALL": 3,
                    "STREAM_SYSTEM": 3,
                    "STREAM_MUSIC": 3,
                    "STREAM_ALARM": 3,
                    "STREAM_NOTIFICATION": 3,
                    "STREAM_DTMF": 3
                }
            }]
        };

        jqUnit.assertDeepEq("Check that float numbers are transformed to integers",
                            expectedRealValues,
                            amSettingsHandler.get(getPayload));

        // Restoring all settings to its initial values
        //
        amSettingsHandler.set(originalSettingsPayload);
    });
})();
