/*!
GPII Android Sensors

Copyright 2013 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Currently we need to do this in order to work correctly with
// Anode's JS bridge
var thatall = this;

(function () {
    "use strict";

    var http = require("http");
    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");

    var bridge = require("bridge");
    bridge.load("net.gpii.AndroidSensorsImpl", thatall);

    fluid.registerNamespace("gpii.androidSensors");

    gpii.androidSensors.getEndPoint = function () {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);
        return androidSensors.getEndPoint();
    };

    gpii.androidSensors.setEndPoint = function (value) {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);
        androidSensors.setEndPoint(value);
    };

    fluid.defaults("gpii.androidSensors.getSensors", {
        gradeNames: "fluid.function"
    });

    gpii.androidSensors.getSensors = function() {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);

        // TODO: Provide the full list of available sensors
        // and some useful info about them, ie:
        //
        // [{
        //     id: xyz,
        //     name: getName,
        //     type: getType,
        //     maxRange: getMaximumRange,
        //     minDelay: getMinDelay,
        //     maxDelay: getMaxDelay,
        //     resolution: getResolution,
        //     version: getVerÂºsion,
        //     vendor: getVendor,
        //     power: getPower
        // }]
        //
        // There's an initial implementation of it (in the Java side)
        // but requires some work. Check AndroidSensorsImpl for details
        //

        var sensors = androidSensors.listSensors();
        return sensors;
    };

    // Light sensor
    //
    gpii.androidSensors.startLightSensor = function () {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);
        androidSensors.startLightSensor();
    };

    gpii.androidSensors.stopLightSensor = function () {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);
        androidSensors.stopLightSensor();
    };

    // Noise sensor
    //
    gpii.androidSensors.noiseIntervalId = null;

    gpii.androidSensors.startNoiseSensor = function () {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);

        gpii.androidSensors.noiseIntervalId = setInterval(function () {
            var data = {
                "http://registry.gpii.net/common/environment/auditory.noise": androidSensors.getAmplitudeEMA()
            };

            var headers = {
                "Content-Type": 'application/json',
                "Content-Length": JSON.stringify(data).length
            };

            var options = {
                host: "localhost",
                port: 8081,
                path: "/environmentChanged",
                method: "PUT",
                headers: headers
            };

            var req = http.request(options, function(res) {
                res.setEncoding("utf-8");

                var responseString = "";

                res.on("data", function(data) {
                    responseString += data;
                });

                //res.on("end", function() {
                    // TODO: handle the end event
                //});
            });

            req.on("error", function(e) {
                // TODO: handle error
            });

            req.write(JSON.stringify(data));
            req.end();

        }, 2000);

        androidSensors.startNoiseSensor();
    };

    gpii.androidSensors.stopNoiseSensor = function () {
        var androidSensors = bridge.load("net.gpii.AndroidSensorsImpl", thatall);

        clearInterval(gpii.androidSensors.noiseIntervalId);
        androidSensors.stopNoiseSensor();
    };

})();
