/*
 * GPII Android Persistent Configuration Tests
 *
 * Copyright 2013 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 * */
//
var thatall = this;

var fluid = require("universal"),
    jqUnit = fluid.require("jqUnit"),
    gpii = fluid.registerNamespace("gpii"),
    bridge = require("bridge"),
    androidPersistentConfiguration = bridge.load("net.gpii.AndroidPersistentConfigurationImpl",
                                                 thatall);

jqUnit.module("GPII Android persistentConfiguration");

jqUnit.test("Running tests for persistentConfiguration node module", function () {
    jqUnit.expect(8);

    // Testing the persistentConfiguration Java module

    // Check if all required methods are available through the java bridge
    //
    methods = ["get", "set"];

    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in androidPersistentConfiguration));
    }

    // Check get
    //
    var fontScale = null;
    fontScale = androidPersistentConfiguration.get("fontScale");
    jqUnit.assertNotEquals("'get' gets the fontScale value",
                           null, fontScale);

    // Check set
    //
    androidPersistentConfiguration.set("fontScale", "2");
    jqUnit.assertDeepEq("'set' sets the fontScale value",
                        androidPersistentConfiguration.get("fontScale"),
                        "2.0");

    // Set back fontScale to its original value
    //
    androidPersistentConfiguration.set("fontScale", fontScale);
    jqUnit.assertDeepEq("'set' sets back the fontSize to its original value",
                        androidPersistentConfiguration.get("fontScale"),
                        fontScale);

    // Testing the settings handler
    require("persistentConfiguration");
    var pcSettingsHandler = fluid.registerNamespace("gpii.androidPersistentConfiguration");

    // Check if methods are available through the settings handler module
    //
    methods = ["get", "set"];

    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in pcSettingsHandler));
    }

    // Check get/set payloads of the settings handler
    //
    var getPayload = {
        "com.android.persistentConfiguration": [{
            settings: {
                "fontScale": null,
                "locale": null
            }
        }]
    };

    var setPayload = {
        "com.android.persistentConfiguration": [{
            settings: {
                "fontScale": 1.5,
                "locale": "en_US"
            }
        }]
    };

    var originalSettingsPayload = pcSettingsHandler.get(getPayload);

    var originalSettings =
        originalSettingsPayload["com.android.persistentConfiguration"][0].settings;

    var expectedPayload = {
        "com.android.persistentConfiguration": [{
            "settings": {
                "fontScale": {
                    "oldValue": originalSettings.fontScale,
                    "newValue": "1.5"
                },
                "locale": {
                    "oldValue": originalSettings.locale,
                    "newValue": "en_US"
                }
            }
        }]
    };

    var returnPayload = pcSettingsHandler.set(setPayload);
    jqUnit.assertDeepEq("'set' returns the expected payload",
                        returnPayload,
                        expectedPayload);

    // Restoring all settings to its initial values
    //
    var restorePayload = {
        "com.android.persistentConfiguration": [{
            settings: {
                "fontScale": parseFloat(originalSettings.fontScale),
                "locale": originalSettings.locale
            }
        }]
    };
    var returnPayload2 = pcSettingsHandler.set(restorePayload);

});
