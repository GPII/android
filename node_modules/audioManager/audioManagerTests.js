/*
GPII Android Audio Manager Tests

Copyright 2013 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var thatall = this;

var fluid = require("universal"),
    jqUnit = fluid.require("jqUnit"),
    gpii = fluid.registerNamespace("gpii"),
    bridge = require("bridge"),
    androidAudioManager = bridge.load("net.gpii.AndroidAudioManagerImpl",
                                      thatall);

jqUnit.module("GPII Android audioManager");

jqUnit.test("Running tests for audioManager node module", function () {
    jqUnit.expect(9);

    // Testing the audioManager Java module

    // Check if all required methods are available through the java bridge
    //
    methods = ["getVolume", "setVolume"];

    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in androidAudioManager));
    }

    // Check getVolume
    //
    var system_volume = null;
    system_volume = androidAudioManager.getVolume("STREAM_SYSTEM");
    jqUnit.assertNotEquals("'getVolume' gets the value",
                           null, system_volume);

    // Check setVolume
    //
    androidAudioManager.setVolume("STREAM_SYSTEM", 0);
    jqUnit.assertDeepEq("'setVolume' sets the value",
                        androidAudioManager.getVolume("STREAM_SYSTEM"),
                        0);

    // Set the volume back to its original value
    //
    androidAudioManager.setVolume("STREAM_SYSTEM", system_volume);
    jqUnit.assertDeepEq("'setVolume' sets back the volume to its original value",
                        androidAudioManager.getVolume("STREAM_SYSTEM"),
                        system_volume);

    // Testing the audioManager settings handler

    require("audioManager");
    var amSettingsHandler = fluid.registerNamespace("gpii.androidAudioManager");

    // Check if methods are available through the settings handler module
    //
    methods = ["getVolume", "setVolume"];

    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in amSettingsHandler));
    }

    // Check get/set payloads of the settings handler
    //
    var getPayload = {
        "com.android.audioManager": [{
            settings: {
                "STREAM_VOICE_CALL": null,
                "STREAM_SYSTEM": null,
                "STREAM_MUSIC": null,
                "STREAM_ALARM": null,
                "STREAM_NOTIFICATION": null,
                "STREAM_DTMF": null
            }
        }]
    };

    var setPayload = {
        "com.android.audioManager": [{
            settings: {
                "STREAM_VOICE_CALL": 3,
                "STREAM_SYSTEM": 3.5,
                "STREAM_MUSIC": 3,
                "STREAM_ALARM": 3,
                "STREAM_NOTIFICATION": 3,
                "STREAM_DTMF": 3
            }
        }]
    };

    var originalSettingsPayload = amSettingsHandler.getVolume(getPayload);
    var originalSettings =
        originalSettingsPayload["com.android.audioManager"][0].settings;

    var expectedPayload = {
        "com.android.audioManager": [{
            "settings": {
                "STREAM_VOICE_CALL": {
                    "oldValue": originalSettings.STREAM_VOICE_CALL,
                    "newValue": 3
                },
                "STREAM_SYSTEM": {
                    "oldValue": originalSettings.STREAM_SYSTEM,
                    "newValue": 3.5
                },
                "STREAM_MUSIC": {
                    "oldValue": originalSettings.STREAM_MUSIC,
                    "newValue": 3
                },
                "STREAM_ALARM": {
                    "oldValue": originalSettings.STREAM_ALARM,
                    "newValue": 3
                },
                "STREAM_NOTIFICATION": {
                    "oldValue": originalSettings.STREAM_NOTIFICATION,
                    "newValue": 3
                },
                "STREAM_DTMF": {
                    "oldValue": originalSettings.STREAM_DTMF,
                    "newValue": 3
                }
            }
        }]
    };

    var returnPayload = amSettingsHandler.setVolume(setPayload);
    returnPayload["com.android.audioManager"][0].settings.STRING_SYSTEM;

    jqUnit.assertDeepEq("'setVolume' returns the expected payload",
                        returnPayload,
                        expectedPayload);

    // Since Android's Audio Manager API doesn't like float numbers we force them
    // to be integers when setting the value
    //
    var expectedRealValues = {
        "com.android.audioManager": [{
            settings: {
                "STREAM_VOICE_CALL": 3,
                "STREAM_SYSTEM": 3,
                "STREAM_MUSIC": 3,
                "STREAM_ALARM": 3,
                "STREAM_NOTIFICATION": 3,
                "STREAM_DTMF": 3
            }
        }]
    };

    jqUnit.assertDeepEq("Check that float numbers are transformed to integers",
                        expectedRealValues,
                        amSettingsHandler.getVolume(getPayload));

    // Restoring all settings to its initial values
    //
    var returnPayload2 = amSettingsHandler.setVolume(originalSettingsPayload);

});
