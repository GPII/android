/*
GPII Android Settings Tests

Copyright 2013 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var thatall = this;

var fluid = require("universal"),
    jqUnit = fluid.require("jqUnit"),
    gpii = fluid.registerNamespace("gpii"),
    bridge = require("bridge"),
    androidSettings = bridge.load("net.gpii.AndroidSettingsImpl",
                                      thatall);

jqUnit.module("GPII Android Settings");

jqUnit.test("Running tests for androidSettings node module", function () {
    jqUnit.expect(11);

    // Testing the androidSettings Java module

    // Check if all required methods are available through the java bridge
    //
    methods = ["get", "set"];

    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in androidSettings));
    }

    // Check get method
    //
    var tts_default_rate = null;
    tts_default_rate = androidSettings.get("Secure", "tts_default_rate");
    jqUnit.assertNotEquals("'get' gets a value from 'Secure' DB",
                           null, tts_default_rate);

    jqUnit.assertDeepEq("'get' gets values as strings",
                        typeof(""), typeof(tts_default_rate));

    // Check set method
    //
    androidSettings.set("Secure", "tts_default_rate", "222");
    jqUnit.assertDeepEq("'set' works as expected and stores the new value",
                        "222", androidSettings.get("Secure", "tts_default_rate"));

    // Put back the original value for tts_default_rate
    //
    androidSettings.set("Secure", "tts_default_rate", tts_default_rate);


    // Testing the androidSettings settings handler
    require("androidSettings");
    var asSettingsHandler = fluid.registerNamespace("gpii.androidSettings");

    // Check if methods are available through the settings handler module
    //
    methods = ["get", "set"];

    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in asSettingsHandler));
    }

    // Check get/set payloads of the settings handler
    //
    var getPayload1 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": null
            },
            options: {
                "settingType": "Secure"
            }
        }]
    };

    var expectedGetPayload1 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": tts_default_rate
            }
        }]
    };

    jqUnit.assertDeepEq("'get' gets the expected payload",
                        expectedGetPayload1,
                        asSettingsHandler.get(getPayload1));


    var setPayload1 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": 222
            },
            options: {
                "settingType": "Secure"
            }
        }]
    };

    var expectedResultFromSetPayload1 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": {
                    "oldValue": tts_default_rate,
                    "newValue": "222"
                }
            }
        }]
    };

    jqUnit.assertDeepEq("'set' gets the expected payload",
                        expectedResultFromSetPayload1,
                        asSettingsHandler.set(setPayload1));

    restorePayload1 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": tts_default_rate
            },
            options: {
                "settingType": "Secure"
            }
        }]
    };

    // Restore settings into its original values
    //
    var restoreResult1 = asSettingsHandler.set(restorePayload1);

    // Testing get/set with more complex payloads
    //
    var getPayload2 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": null
            },
            options: {
                "settingType": "Secure"
            }
        }],
        "com.android.settings.system": [{
            settings: {
                "accelerometer_rotation": null,
                "screen_off_timeout": null
            },
            options: {
                "settingType": "System"
            }
        }]
    };

    var setPayload2 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate": 400.5
            },
            options: {
                "settingType": "Secure"
            }
        }],
        "com.android.settings.system": [{
            settings: {
                "accelerometer_rotation": false,
                "screen_off_timeout": 25000
            },
            options: {
                "settingType": "System"
            }
        }]
    };

    var originalSettings = asSettingsHandler.get(getPayload2);
    var originalSecureSettings = originalSettings["com.android.settings.secure"][0];
    var originalSystemSettings = originalSettings["com.android.settings.system"][0];

    var expectedResultFromSetPayload2 = {
        "com.android.settings.secure": [{
            settings: {
                "tts_default_rate":  { 
                    "oldValue": originalSecureSettings.settings.tts_default_rate,
                    "newValue": "400"
                }
            }
        }],
        "com.android.settings.system": [{
            settings: {
                "accelerometer_rotation": {
                    "oldValue": originalSystemSettings.settings.accelerometer_rotation,
                    "newValue": "0"
                },
                "screen_off_timeout": {
                    "oldValue": originalSystemSettings.settings.screen_off_timeout,
                    "newValue": "25000"
                }
            }
        }]
    };

    var restorePayload2 = {
        "com.android.settings.secure": [{
            settings: originalSecureSettings.settings,
            options: { "settingType": "System" }
        }],
        "com.android.settings.system": [{
            settings: originalSystemSettings.settings,
            options: { "settingType": "System" }
        }]
    };

    jqUnit.assertDeepEq("'set' gets the expected payload",
                        expectedResultFromSetPayload2,
                        asSettingsHandler.set(setPayload2));

    // Restore back to original values and compare with original get payload
    //
    asSettingsHandler.set(restorePayload2);
    jqUnit.assertDeepEq("'set' gets the expected payload",
                        originalSettings,
                        asSettingsHandler.get(getPayload2));

});
