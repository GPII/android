/*!
GPII Android Settings

Copyright 2013 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

// Currently we need to do this in order to work correctly with
// Anode's JS bridge
var thatall = this;

(function () {
    "use strict";

    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");

    var bridge = require("bridge");

    fluid.registerNamespace("gpii.tvSettings");

    fluid.defaults("gpii.tvSettings.get", {
        gradeNames: "fluid.function",
        argumentMap: {
            settingsarray: 0
        }
    });

    fluid.defaults("gpii.tvSettings.set", {
        gradeNames: "fluid.function",
        argumentMap: {
            settingsarray: 0
        }
    });

    gpii.tvSettings.get = function(settingsarray) {
        var androidSettings = bridge.load("com.tpvision.gpiitvproxy.TVSettingsImpl", thatall);
        var app = fluid.copy(settingsarray);

        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var settings = app[appId][j].settings;
                var settingType = app[appId][j].options.settingType;

                for (var settingKey in settings) {
                    settings[settingKey] = androidSettings.get(settingType,
                                                               settingKey);
                }

                var noOptions = { settings: settings };
                app[appId][j] = noOptions;
            }
        }

        return app;
    };

    gpii.tvSettings.set = function(settingsarray) {
        var androidSettings = bridge.load("com.tpvision.gpiitvproxy.TVSettingsImpl", thatall);
        var app = fluid.copy(settingsarray);

        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var settings = app[appId][j].settings;
                var settingType = app[appId][j].options.settingType;

                for (var settingKey in settings) {
                    var value = settings[settingKey];
                    var oldValue;

                    // Since this Android API always expects strings as values,
                    // we have to convert them before applying the new value
                    //
                    if (typeof(value) === 'number') {
                        value = parseInt(Math.abs(value)).toString();
                    } else if (typeof(value) === 'boolean') {
                        value = Number(value).toString();
                    }

                    oldValue = androidSettings.get(settingType, settingKey);
                    androidSettings.set(settingType, settingKey, value);

                    settings[settingKey] = {
                        "oldValue": oldValue,
                        "newValue": value
                    };
                }

                var noOptions = { settings: settings};
                app[appId][j] = noOptions;
            }
        }

        return app;
    };

})();
